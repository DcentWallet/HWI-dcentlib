# Automatically generated by pb2py
# fmt: off
from .. import prototrez as p

from .coin_list_t import coin_list_t
from .fingerprint_t import fingerprint_t

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypewallet_state_t = Literal[0, 1, 2, 3, 4, 255]
    except ImportError:
        pass


class get_info_res_parameter_t(p.MessageType):

    def __init__(
        self,
        devid: str = None,
        fw_ver: str = None,
        ksm_ver: str = None,
        state: EnumTypewallet_state_t = None,
        coin: List[coin_list_t] = None,
        fingerprint: fingerprint_t = None,
        label: str = None,
    ) -> None:
        self.devid = devid
        self.fw_ver = fw_ver
        self.ksm_ver = ksm_ver
        self.state = state
        self.coin = coin if coin is not None else []
        self.fingerprint = fingerprint
        self.label = label

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('devid', p.UnicodeType, 0),  # required
            2: ('fw_ver', p.UnicodeType, 0),  # required
            3: ('ksm_ver', p.UnicodeType, 0),  # required
            4: ('state', p.EnumType("wallet_state_t", (0, 1, 2, 3, 4, 255)), 0),  # required
            5: ('coin', coin_list_t, p.FLAG_REPEATED),
            6: ('fingerprint', fingerprint_t, 0),  # required
            7: ('label', p.UnicodeType, 0),  # required
        }
