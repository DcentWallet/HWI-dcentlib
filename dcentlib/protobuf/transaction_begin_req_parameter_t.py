# Automatically generated by pb2py
# fmt: off
from .. import prototrez as p

from .transaction_input_t import transaction_input_t
from .transaction_output_t import transaction_output_t

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
    except ImportError:
        pass


class transaction_begin_req_parameter_t(p.MessageType):

    def __init__(
        self,
        version: int = None,
        tx_blk_size: int = None,
        input: List[transaction_input_t] = None,
        output: List[transaction_output_t] = None,
        locktime: int = None,
    ) -> None:
        self.version = version
        self.tx_blk_size = tx_blk_size
        self.input = input if input is not None else []
        self.output = output if output is not None else []
        self.locktime = locktime

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('version', p.UVarintType, 0),  # required
            2: ('tx_blk_size', p.UVarintType, 0),  # required
            5: ('input', transaction_input_t, p.FLAG_REPEATED),
            7: ('output', transaction_output_t, p.FLAG_REPEATED),
            8: ('locktime', p.UVarintType, 0),  # required
        }
