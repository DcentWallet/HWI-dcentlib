# Automatically generated by pb2py
# fmt: off
from .. import prototrez as p

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypetransaction_type_t = Literal[0, 1, 2, 3, 4, 5, 255]
    except ImportError:
        pass


class transaction_input_t(p.MessageType):

    def __init__(
        self,
        prev_tx_size: int = None,
        utxo_idx: int = None,
        type: EnumTypetransaction_type_t = None,
        key_path: str = None,
        sequence: int = None,
    ) -> None:
        self.prev_tx_size = prev_tx_size
        self.utxo_idx = utxo_idx
        self.type = type
        self.key_path = key_path
        self.sequence = sequence

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('prev_tx_size', p.UVarintType, 0),  # required
            2: ('utxo_idx', p.UVarintType, 0),  # required
            3: ('type', p.EnumType("transaction_type_t", (0, 1, 2, 3, 4, 5, 255)), 0),  # required
            4: ('key_path', p.UnicodeType, 0),  # required
            5: ('sequence', p.UVarintType, 0),
        }
