# Automatically generated by pb2py
# fmt: off
from .. import prototrez as p

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypetransaction_type_t = Literal[0, 1, 2, 3, 4, 5, 255]
    except ImportError:
        pass


class transaction_output_t(p.MessageType):

    def __init__(
        self,
        type: EnumTypetransaction_type_t = None,
        value: int = None,
        to_address: List[str] = None,
    ) -> None:
        self.type = type
        self.value = value
        self.to_address = to_address if to_address is not None else []

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('type', p.EnumType("transaction_type_t", (0, 1, 2, 3, 4, 5, 255)), 0),  # required
            2: ('value', p.UVarintType, 0),  # required
            3: ('to_address', p.UnicodeType, p.FLAG_REPEATED),
        }
